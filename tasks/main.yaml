---
- name: "Detect RHEL release"
  ansible.builtin.setup:
    filter: ansible_distribution_major_version
  when: ansible_distribution_major_version is not defined

- name: "Gather list of installed packages"
  ansible.builtin.package_facts:

- name: "If running on Satellite, check if lock is active"
  ansible.builtin.command: satellite-maintain packages is-locked
  when: "'sos' not in ansible_facts.packages and 'satellite-maintain' in ansible_facts.packages"
  ignore_errors: yes
  register: satellite_lock_cmd
  changed_when: false
  failed_when: "satellite_lock_cmd.rc not in [0, 1]"

- name: "If running on Satellite, determine lock state"
  ansible.builtin.set_fact:
    satellite_lock: "{{ (satellite_lock_cmd.stdout == 'Packages are locked') | ternary('locked', 'unlocked') }}"
  when: "'sos' not in ansible_facts.packages and satellite_lock_cmd is defined"

- name: "If running on Satellite and locked, unlock"
  command: "satellite-maintain packages unlock"
  when: "'sos' not in ansible_facts.packages and satellite_lock is defined and satellite_lock == 'locked'"

- name: "Install sosreport"
  ansible.builtin.package:
    name: sos
    state: installed
  when: "'sos' not in ansible_facts.packages"

- name: "If running on Satellite that was locked, lock"
  command: "satellite-maintain packages lock"
  when: "'sos' not in ansible_facts.packages and satellite_lock is defined and satellite_lock == 'locked'"

- name: "Run sosreport (on < RHEL 8)"
  command: "sosreport --batch --all-logs"
  register: sosreport_cmd
  when:
    - ansible_distribution_major_version | int < 8

- name: "Run sosreport (on >= RHEL 8)"
  command: "sos report --batch --all-logs"
  register: sosreport_cmd
  when:
    - ansible_distribution_major_version | int >= 8

- name: "Extract sosreport tarball name"
  ansible.builtin.set_fact:
    sosreport_tarball: "{{ sosreport_cmd.stdout_lines|select('match', '^\\s*/var/tmp/sosreport-.*')|first|trim }}"

- name: "Get sosreport tarball size"
  ansible.builtin.stat:
    path: "{{ sosreport_tarball }}"
  register: sosreport_stat

- name: "Check sosreport tarball file exists"
  ansible.builtin.assert:
    that:
      - sosreport_stat.stat.exists
    quiet: yes

- name: "Show info about remote sosreport tarballs"
  ansible.builtin.debug:
    msg: "Generated {{ sosreport_tarball }} in {{ sosreport_cmd.delta }} seconds with file size {{ sosreport_stat.stat.size|filesizeformat }}"

- name: "Show direcotry we will be fetching to"
  ansible.builtin.debug:
    var: sosreport_gatherer_local_dir
  run_once: yes

- name: "Cleanup local sosreport tarballs dir"
  ansible.builtin.file:
    path: "{{ sosreport_gatherer_local_dir }}"
    state: absent
  delegate_to: localhost

- name: "Fetch sosreport tarballs"
  ansible.builtin.fetch:
    src: "{{ sosreport_tarball }}"
    dest: "{{ sosreport_gatherer_local_dir }}"
    flat: yes

- name: "Cleanup remote sosreport tarballs"
  ansible.builtin.file:
    path: "{{ sosreport_tarball }}"
    state: absent
...
